{"version":3,"sources":["../node_modules/readandspeech/src/exceptions/ReadAndSpeechNotSupported.js","../node_modules/readandspeech/src/ReadAndSpeech.js","app.js"],"names":["ReadAndSpeechNotSupported","Error","constructor","msg","name","ReadAndSpeech","console","log","window","awaitVoices","Promise","done","speechSynthesis","onvoiceschanged","synthesis","SpeechSynthesisUtterance","speak","text","speakers","getVoices","changeVoice","voice","currentVoice","readAndSpeech","voices","then","voiceSelector","document","querySelector","defaultSpeaker","find","speaker","lang","navigator","language","map","option","createElement","innerHTML","value","voiceURI","selected","appendChild","push","addEventListener","e","preventDefault","formData","message","FormData","target","get","selectedVoice"],"mappings":";AAOeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAPf,MAAMA,UAAkCC,MACtCC,YAAYC,GACJA,MAAAA,GACDC,KAAAA,KAAO,6BAIDJ,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC2BAK,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAlCf,IAAA,EAAA,EAAA,QAAA,2CAkCeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAhCf,MAAMA,EACJH,cAEM,GADJI,QAAQC,IAAI,mBACL,oBAAqBC,QACpB,MAAA,IAAIR,EAAJ,QAA8B,oDAGjCS,KAAAA,YAAc,IAAIC,QAAQC,GAAQH,OAAOI,gBAAgBC,gBAAkBF,GAC3EG,KAAAA,UAAY,IAAIC,yBAGvBC,MAAMb,GAGGK,OAFFM,KAAAA,UAAUG,KAAOd,EAEfK,OAAOI,gBAAgBI,MAAM,KAAKF,WAGrCI,uBACiB,KAAKT,YAEnBD,OAAAA,OAAOI,gBAAgBO,YAGhCC,YAAYC,GACLP,KAAAA,UAAUO,MAAQA,EAGzBC,eACS,OAAA,KAAKR,UAAUO,OAIXhB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACDf,aAjCA,IAAA,EAAA,EAAA,QAAA,kBAiCA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA/BA,IAAMkB,EAAgB,IAAIlB,EAAJ,QAChBmB,EAAS,GAEfD,EAAcL,WAAWO,KAAK,SAAAP,GACtBQ,IAAAA,EAAgBC,SAASC,cAAc,kBACvCC,EAAiBX,EAASY,KAAK,SAACC,GAAYA,OAAAA,EAAQC,MAAQC,UAAUC,WAC5EX,EAAcH,YAAYS,GAE1BX,EAASiB,IAAI,SAAAJ,GACLK,IAAAA,EAAST,SAASU,cAAc,UACtCD,EAAOE,UAAeP,GAAAA,OAAAA,EAAQ3B,KAAU2B,OAAAA,OAAAA,EAAQC,MAChDI,EAAOG,MAAQR,EAAQS,SACnBT,GAAWR,EAAcD,iBAC3Bc,EAAOK,SAAW,YAGpBf,EAAcgB,YAAYN,GAE1BZ,EAAOmB,KAAKZ,OAIhBJ,SAASC,cAAc,QAAQgB,iBAAiB,SAAU,SAACC,GACzDA,EAAEC,iBAEIC,IACAC,EADW,IAAIC,SAASJ,EAAEK,QACPC,IAAI,WAE7B5B,EAAcP,MAAMgC,KAGtBrB,SAASC,cAAc,kBAAkBgB,iBAAiB,SAAU,SAACC,GACnEA,EAAEC,iBAEIM,IAAAA,EAAgB5B,EAAOM,KAAK,SAACT,GAAUA,OAAAA,EAAMmB,WAAaK,EAAEK,OAAOX,QAEzEhB,EAAcH,YAAYgC","file":"app.e1b7d495.js","sourceRoot":"../src","sourcesContent":["class ReadAndSpeechNotSupported extends Error {\n  constructor(msg) {\n    super(msg)\n    this.name = 'ReadAndSpeechNotSupported'\n  }\n}\n\nexport default ReadAndSpeechNotSupported","import ReadAndSpeechNotSupported from './exceptions/ReadAndSpeechNotSupported'\n\nclass ReadAndSpeech {\n  constructor() {\n    console.log('it\\'s my local')\n    if (! ('speechSynthesis' in window)) {\n      throw new ReadAndSpeechNotSupported('speechSynthesis is not supported on your browser')\n    }\n\n    this.awaitVoices = new Promise(done => window.speechSynthesis.onvoiceschanged = done)\n    this.synthesis = new SpeechSynthesisUtterance()\n  }\n\n  speak(msg) {\n    this.synthesis.text = msg\n\n    return window.speechSynthesis.speak(this.synthesis)\n  }\n\n  async speakers() {\n    const voices = await this.awaitVoices\n\n    return window.speechSynthesis.getVoices()\n  }\n\n  changeVoice(voice) {\n    this.synthesis.voice = voice\n  }\n\n  currentVoice() {\n    return this.synthesis.voice\n  }\n}\n\nexport default ReadAndSpeech","import ReadAndSpeech from 'readandspeech'\n\nconst readAndSpeech = new ReadAndSpeech\nconst voices = [];\n\nreadAndSpeech.speakers().then(speakers => {\n  const voiceSelector = document.querySelector('#voiceSelector')\n  const defaultSpeaker = speakers.find((speaker) => speaker.lang == navigator.language)\n  readAndSpeech.changeVoice(defaultSpeaker);\n\n  speakers.map(speaker => {\n    const option = document.createElement('option')\n    option.innerHTML = `${speaker.name} - ${speaker.lang}`\n    option.value = speaker.voiceURI\n    if (speaker == readAndSpeech.currentVoice()) {\n      option.selected = 'selected'\n    }\n    \n    voiceSelector.appendChild(option)\n\n    voices.push(speaker)\n  })\n})\n\ndocument.querySelector('form').addEventListener('submit', (e) => {\n  e.preventDefault()\n  \n  const formData = new FormData(e.target)\n  const message = formData.get('message')\n  \n  readAndSpeech.speak(message)\n})\n\ndocument.querySelector('#voiceSelector').addEventListener('change', (e) => {\n  e.preventDefault()\n  \n  const selectedVoice = voices.find((voice) => voice.voiceURI === e.target.value)\n\n  readAndSpeech.changeVoice(selectedVoice)\n})"]}